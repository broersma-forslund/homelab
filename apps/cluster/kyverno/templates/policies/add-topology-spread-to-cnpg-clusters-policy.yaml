apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-topology-spread-to-cnpg-clusters
  annotations:
    "policies.kyverno.io/title": "Add Topology Spread Constraints to CNPG Clusters"
    "policies.kyverno.io/category": "Best Practices"
    "policies.kyverno.io/subject": "TopologySpreadConstraints"
    "policies.kyverno.io/description": "Ensures CloudNativePG Cluster pods have topology spread constraints for each pod role for high availability."
spec:
  validationFailureAction: Audit
  rules:
    - name: add-topology-spread-to-cnpg-cluster-podroles
      match:
        resources:
          kinds:
            - postgresql.cnpg.io/v1/Cluster
          operations:
            - CREATE
            - UPDATE
      celPreconditions:
        - expression: "!has(object.spec.topologySpreadConstraints)"
          message: "PostgresCluster already has topologySpreadConstraints"
      mutate:
        patchStrategicMerge:
          spec:
            topologySpreadConstraints:
              # instance pods
              - maxSkew: 1
                topologyKey: "kubernetes.io/hostname"
                whenUnsatisfiable: "ScheduleAnyway"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: instance
              - maxSkew: 1
                topologyKey: "topology.kubernetes.io/zone"
                whenUnsatisfiable: "DoNotSchedule"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: instance
              # replica pods
              - maxSkew: 1
                topologyKey: "kubernetes.io/hostname"
                whenUnsatisfiable: "ScheduleAnyway"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: replica
              - maxSkew: 1
                topologyKey: "topology.kubernetes.io/zone"
                whenUnsatisfiable: "DoNotSchedule"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: replica
              # wal pods
              - maxSkew: 1
                topologyKey: "kubernetes.io/hostname"
                whenUnsatisfiable: "ScheduleAnyway"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: wal
              - maxSkew: 1
                topologyKey: "topology.kubernetes.io/zone"
                whenUnsatisfiable: "DoNotSchedule"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: wal
              # backup pods
              - maxSkew: 1
                topologyKey: "kubernetes.io/hostname"
                whenUnsatisfiable: "ScheduleAnyway"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: backup
              - maxSkew: 1
                topologyKey: "topology.kubernetes.io/zone"
                whenUnsatisfiable: "DoNotSchedule"
                labelSelector:
                  matchLabels:
                    cnpg.io/cluster: {{`{{ name }}`}}
                    cnpg.io/podRole: backup
