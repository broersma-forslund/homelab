apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  admin.enabled: 'false'
  exec.enabled: 'true'
  url: https://argocd.mobrockers.com
  statusbadge.enabled: 'false'
  users.anonymous.enabled: 'false'

  oidc.config: |
    name: Authentik
    issuer: https://authentik.mobrockers.com/application/o/argocd/
    logoutURL: https://authentik.mobrockers.com/application/o/argocd/end-session/
    clientID: $authentik-credentials:client_id
    clientSecret: $authentik-credentials:client_secret
    requestedScopes: ['openid', 'profile', 'email', 'groups', 'offline_access']
  accounts.kubechecks: apiKey

  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
    jqPathExpressions:
    - '.webhooks[]?.clientConfig.caBundle'
  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
    jqPathExpressions:
    - '.webhooks[]?.clientConfig.caBundle'

  resource.customizations.ignoreDifferences.argoproj.io_Application: |
    jqPathExpressions:
      - .metadata.finalizers[]? | select(. == "post-delete-finalizer.argocd.argoproj.io" or . == "post-delete-finalizer.argocd.argoproj.io/cleanup")
      - if (.metadata.finalizers | length) == 0 then .metadata.finalizers else empty end

  resource.customizations.actions.postgresql.cnpg.io_Cluster: |
    discovery.lua: |
      actions = {}
      actions["restart"] = {}
      actions["reload"] = {}
      actions["failover"] = {}
      return actions

    definitions:
      - name: restart
        action.lua: |
          local os = require("os")
          if obj.metadata == nil then
            obj.metadata = {}
          end
          if obj.metadata.annotations == nil then
            obj.metadata.annotations = {}
          end
          obj.metadata.annotations["kubectl.kubernetes.io/restartedAt"] = os.date("!%Y-%m-%dT%XZ")
          return obj
      - name: reload
        action.lua: |
          local os = require("os")
          if obj.metadata == nil then
            obj.metadata = {}
          end
          if obj.metadata.annotations == nil then
            obj.metadata.annotations = {}
          end
          obj.metadata.annotations["cnpg.io/reloadedAt"] = os.date("!%Y-%m-%dT%XZ")
          return obj
      - name: failover
        action.lua: |
          local os = require("os")
          local nextIndex = 0
          for index, node in pairs(obj.status.instancesStatus.healthy) do
            if node == obj.status.currentPrimary then
              nextIndex = index + 1
              if nextIndex > #obj.status.instancesStatus.healthy then
                nextIndex = 1
              end
              break
            end
          end
          if nextIndex > 0 then
            obj.status.targetPrimary = obj.status.instancesStatus.healthy[nextIndex]
            obj.status.targetPrimaryTimestamp = os.date("!%Y-%m-%dT%XZ")
          end
          return obj
