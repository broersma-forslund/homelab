apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
data:
  admin.enabled: 'true'
  exec.enabled: 'true'
  url: https://argocd.mobrockers.com
  statusbadge.enabled: 'false'
  users.anonymous.enabled: 'false'

  oidc.config: |
    name: Authentik
    issuer: https://authentik.mobrockers.com/application/o/argocd/
    logoutURL: https://authentik.mobrockers.com/application/o/argocd/end-session/
    clientID: $authentik-credentials:client_id
    clientSecret: $authentik-credentials:client_secret
    requestedScopes: ['openid', 'profile', 'email', 'groups', 'offline_access']
  accounts.kubechecks: apiKey

  resource.exclusions: |
    - apiGroups:
      - wgpolicyk8s.io
      - reports.kyverno.io
      kinds:
      - ClusterPolicyReport
      - PolicyReport
      - ClusterEphemeralReport
      - EphemeralReport
      clusters:
      - "*"

  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
    jqPathExpressions:
    - '.webhooks[]?.clientConfig.caBundle'
  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
    jqPathExpressions:
    - '.webhooks[]?.clientConfig.caBundle'

  resource.customizations.ignoreDifferences.argoproj.io_Application: |
    jqPathExpressions:
      - .metadata.finalizers[]? | select(. == "post-delete-finalizer.argocd.argoproj.io" or . == "post-delete-finalizer.argocd.argoproj.io/cleanup")
      - if (.metadata.finalizers | length) == 0 then .metadata.finalizers else empty end

  resource.customizations.health.postgresql.cnpg.io_CLuster: |
    local hs = {}

    local cnpgStatus = {
        ["Cluster in healthy state"] = "Healthy",
        ["Setting up primary"] = "Progressing",
        ["Setting up primary"] = "Progressing",
        ["Creating a new replica"] = "Progressing",
        ["Upgrading cluster"] = "Progressing",
        ["Waiting for the instances to become active"] = "Progressing",
        ["Promoting to primary cluster"] = "Progressing",
        ["Switchover in progress"] = "Degraded",
        ["Failing over"] = "Degraded",
        ["Upgrading Postgres major version"] = "Degraded",
        ["Cluster upgrade delayed"] = "Degraded",
        ["Waiting for user action"] = "Degraded",
        ["Primary instance is being restarted in-place"] = "Degraded",
        ["Primary instance is being restarted without a switchover"] = "Degraded",
        ["Cluster cannot execute instance online upgrade due to missing architecture binary"] = "Degraded",
        ["Online upgrade in progress"] = "Degraded",
        ["Applying configuration"] = "Degraded",
        ["Unable to create required cluster objects"] = "Suspended",
        ["Cluster cannot proceed to reconciliation due to an unknown plugin being required"] = "Suspended",
        ["Cluster has incomplete or invalid image catalog"] = "Suspended",
        ["Cluster is unrecoverable and needs manual intervention"] = "Suspended",
    }

    function hibernating(obj)
        for i, condition in pairs(obj.status.conditions) do
            if condition.type == "cnpg.io/hibernation" then
                return condition
            end
        end
        return nil
    end

    if obj.status ~= nil and obj.status.conditions ~= nil then
        local hibernation = hibernating(obj)
        if hibernation ~= nil then
            if hibernation.status == "True" then
                hs.status = "Suspended"
                hs.message = hibernation.message
                return hs
            else
                hs.status = "Degraded"
                hs.message = hibernation.message
                return hs
            end
        end
        statusState = cnpgStatus[obj.status.phase]
        if statusState ~= nil then
            hs.status = statusState
            hs.message = obj.status.phaseReason
            return hs
        else
            hs.status = "Unknown"
            hs.message = obj.status.phaseReason
            return hs
        end
    end

    hs.status = "Progressing"
    hs.message = obj.status.phaseReason
    return hs

  resource.customizations.actions.postgresql.cnpg.io_Cluster: |
    discovery.lua: |
      actions = {}
      actions["restart"] = {}
      actions["reload"] = {}
      actions["failover"] = {}
      return actions

    definitions:
      - name: restart
        action.lua: |
          local os = require("os")
          if obj.metadata == nil then
            obj.metadata = {}
          end
          if obj.metadata.annotations == nil then
            obj.metadata.annotations = {}
          end
          obj.metadata.annotations["kubectl.kubernetes.io/restartedAt"] = os.date("!%Y-%m-%dT%XZ")
          return obj
      - name: reload
        action.lua: |
          local os = require("os")
          if obj.metadata == nil then
            obj.metadata = {}
          end
          if obj.metadata.annotations == nil then
            obj.metadata.annotations = {}
          end
          obj.metadata.annotations["cnpg.io/reloadedAt"] = os.date("!%Y-%m-%dT%XZ")
          return obj
      - name: failover
        action.lua: |
          local os = require("os")
          local nextIndex = 0
          for index, node in pairs(obj.status.instancesStatus.healthy) do
            if node == obj.status.currentPrimary then
              nextIndex = index + 1
              if nextIndex > #obj.status.instancesStatus.healthy then
                nextIndex = 1
              end
              break
            end
          end
          if nextIndex > 0 then
            obj.status.targetPrimary = obj.status.instancesStatus.healthy[nextIndex]
            obj.status.targetPrimaryTimestamp = os.date("!%Y-%m-%dT%XZ")
          end
          return obj
