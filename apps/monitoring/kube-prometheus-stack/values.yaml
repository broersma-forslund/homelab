prometheus-operator-crds:
  crds:
    annotations:
      argocd.argoproj.io/sync-options: ServerSideApply=true 
kube-prometheus-stack:
  crds:
    enabled: false

  defaultRules:
    rules:
      kubeProxy: false

  cleanPrometheusOperatorObjectNames: true
  prometheusOperator:
    revisionHistoryLimit: 0
    admissionWebhooks:
      patch:
        ttlSecondsAfterFinished: 5

  prometheus:
    prometheusSpec:
      probeSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      replicas: 2
      retention: 365d
      resources:
        requests:
          cpu: 300m
          memory: 2400Mi

      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: 100Gi

  kube-state-metrics:
    revisionHistoryLimit: 0
    metricLabelsAllowlist: 
    - nodes=[topology.kubernetes.io/zone]

  prometheus-node-exporter:
    revisionHistoryLimit: 0
    namespaceOverride: 'prometheus-node-exporter'

  kubeScheduler:
    service:
      selector:
        k8s-app: kube-scheduler
        tier: control-plane
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  kubeControllerManager:
    service:
      selector:
        k8s-app: kube-controller-manager
        tier: control-plane
    spec:
      endpoints:
        - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
          port: http-metrics
          scheme: https
          tlsConfig:
            caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecureSkipVerify: true

  grafana:
    revisionHistoryLimit: 0
    replicas: 1
    initChownData: false
    defaultDashboardsTimezone: Europe/Amsterdam
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: "20m"
      hosts: 
      - grafana.mobrockers.com
      tls:
      - hosts:
        - grafana.mobrockers.com
    env:
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: true
    grafana.ini:
      security:
        allow_embedding: true
      auth.basic:
        enabled: false
      auth:
        signout_redirect_url: https://authentik.mobrockers.com/application/o/grafana/end-session/
        oauth_auto_login: true
      auth.generic_oauth:
        enabled: true
        name: Authentik
        scopes: "openid email profile"
        auth_url: "https://authentik.mobrockers.com/application/o/authorize/"
        token_url: "https://authentik.mobrockers.com/application/o/token/"
        api_url: "https://authentik.mobrockers.com/application/o/userinfo/"
        client_id: $__file{/etc/secrets/auth_generic_oauth/client_id}
        client_secret: $__file{/etc/secrets/auth_generic_oauth/client_secret}
        allow_assign_grafana_admin: true
        role_attribute_path: contains(groups[*], 'Admins') && 'Admin' || contains(groups[*], 'Contributor') && 'Editor' || 'Viewer'
      server:
        domain: "https://grafana.mobrockers.com"
        root_url: "https://grafana.mobrockers.com"
    extraSecretMounts:
      - name: auth-generic-oauth-secret-mount
        secretName: grafana-authentik-oauth-credentials
        defaultMode: 0440
        mountPath: /etc/secrets/auth_generic_oauth
        readOnly: true
    sidecar:
      alerts:
        enabled: true
        searchNamespace: ALL
      dashboards:
        enabled: true
        searchNamespace: ALL
      datasources:
        enabled: true
        searchNamespace: ALL
      plugins:
        enabled: false
        searchNamespace: ALL
      notifiers:
        enabled: false
        searchNamespace: ALL

  kubeProxy:
    enabled: false # Cilium replacement
